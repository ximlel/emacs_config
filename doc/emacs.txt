任何时候C-c C-h 查看当前绑定的快捷键
任何时时候C-g 来取消命令
1) Buffer相关。emacs可以同时打开多个文件，每一个文件是一个buffer。
  在X下可以用C-mouse1来选择当前活动哪个buffer
  C-x C-b  可以得到一个buffer列表并从中选择哪个buffer打开
  C-x C-f  打开一个文件
  C-x i  在打开的buffer中插入一个文件内容
  C-x k  关闭当前buffer中的文件
  C-x C-s  保存当前buffer
  C-x C-w 另存为
  C-x s  保存所有buffer
  C-x C-q 切换只读和读写模式
  C-M-v   滚动另一个buffer 向下
  C-M-shift-v   滚动另一个buffer 向上
  C-v	  滚动当前buffer 向下
  M-v     滚动当前buffer 向上
  C-x 4 b(f) 在另外一个窗口选择(查找一个文件)buffer
  将当前行置于屏幕中间：C-l.  2次 C-l 置于屏幕首，3次 C-l 置于屏幕末
2) 屏幕分割相关，emacs可以在同一个窗口中看到多个buffer。
  C-x 2  垂直分割当前子窗口
  C-x 3 水平分割当前子窗口
  C-x 1 当前窗口独占窗口空间
  C-x o 活动子窗口切换到另外一个子窗口
  C-x 0 关闭当前窗口
  C-x k 删除缓冲区
3)编辑相关
  插入/覆盖模式切换
      M-x overwrite-mode是用来转换 insert mode 与 overwrite mode
      重复操作：数值引数适用於所有 EMACS 的指令。它的用途可分成 以下数类：
        * 对某一指令做重复执行的动作
        * 用法： C-u n command 或 M- n command
      如：C-u 4 r 在buffer中输入4个r
          C-u 4 C-u 5 在buffer中输入4个5（重复输入数字要注意有两个C-u）
      删除－deletion
      C-d 向后删除一个字元
      删除－killing（剪切）
      要查看kill-ring中的内容  1. 键入 ``Ctrl-h v'' 後， echo area 处会出现：
                             2. 在Describevariable:後输入变数的名称， EMACS 会另开一个视窗来显示此变数的值。此时所要键入的变数名为 ``kill-ring''
      C-k 删除（剪切）一行
      C-x C-o 删除（剪切）光标所在位置后面的空白行
      M-Delete      剪切光标前面的单词
      M-k           剪切从光标位置到句尾的内容
      M-d           剪切光标前面的单词
      C-y
      C-k           剪切从光标位置到行尾的内容
      C-x u         撤销操作(先操作C-x，接着再单击u)
  拷贝与粘贴
    区域标记：设定区块的步骤如下所示：
    1. 设定区块的始位置，也就是所谓的标记（ mark）。
    2. 可使用 `` Ctrl-@'' 或 `` Ctrl-SPC''或M-x set-mark-command任一个指令来设定标记。
    3. 设定区块的终结位置，也就是移动游标至区块的尾端。
    在标记与 point之间的范围就是所谓的区块。
    M-@  开始标记区域用于拷贝
    M-w  拷贝当前mark的区域
    C-w 将当前mark的区域剪切到内存
    C-y  在当前位置粘贴剪贴板的内容
    *C-y M-y  即如果在粘贴命令后根一个M-y，则切换剪贴板的内容，可以有多个M-y
    
    C--; C-/; C-x u undo功能(好象没有redo)
    
    Ctrl-x Ctrl-p（mark-page）
    Ctrl-x Ctrl-l（downcase-region）使区域变成小写
    Ctrl-x Ctrl-u（upcase-region）使区域变成大写
    Meta-x fill-region
    Meta-x print-region
  替换
    M-x replace-string RET 旧字串 RET 新字串 RET（不征询意见）
    M-x query-string RET 旧字串 RET 新字串 RET （征询意见）

5)在线帮助
  Ctrl-h c与 Ctrl-h k'的功能相似， 二者都是在寻求与 Hotkey有关的讯息。二者唯一的差别，就在於对指令的解释详细与否而已。
  C-h a 和C-h w可让使用者键入任意的子字串，都可以找到 相对应的指令。
    使用  Ctrl-h a 所键入的子字串，并不限於指令的第一个字元, 而 Ctrl-h w 则必需以指令的第一个字为起始字。
    使用  Ctrl-h a，可给予指令中任何位置的子字串。Ctrl-h a 无法使用 completion，而 Ctrl-h w可使用 completion。
  C-h i 活着M-x info查看帮助info
  d  运行Ctrl-h i 指令，会先进入 info 树状结构的根部。任何情况下， 可键入 ``d'' 回到此根部
  m MenuName 直接移动到指定的Menu上
  n 将结点移至下一个与此结点相连的结点。
  p 将结点移至上一个与此结点相连的结点。
  u 将结点移至上一层的结点。

6)书签
C-x r m 添加书签
C-x r b 跳到某个书签
M-x list-bookmarks 显示所有书签，在里面d标记删除，u取消，r重命名，x执行操作
要想保存书签，可以修改.emacs文件，在里面添加如下内容
(setq bookmark-save-flag 1)
这会把书签保存到~/.emacs.bmk 

7) code
firstly C-c C-h to read the help
beginning-of-defun(C-M-a)
end-of-defun(C-M-e)
mark-defun(C-M-h)
narrow-to-defun(C-x n d)
unarrow-to-defun(C-x n p)
=============================================
			COMMAND
=============================================
M-x woman 的命令可以高亮的察看manpage
M-x info 的命令可以察看man所提供的所有命令并且以层次形式提供
C-x C-+ 字体变大
C-x C-- 字体变小
C-c M-H 高亮
C-c M-R 取消高亮
=============================================
bookmark
C-x r m 添加书签
C-x r b 跳到某个书签
M-x list-bookmarks 显示所有书签，在里面d标记删除，u取消，r重命名，x执行操作   ==》 C+F12
要想保存书签，可以修改.emacs文件，在里面添加如下内容
(setq bookmark-save-flag 1)
这会把书签保存到~/.emacs.bmk 


临时跳转点,注意跳转点的名字可自由取
C-x r <SPC> q
C-x r j q
=============================================
移动和编辑
move
C-p C-n C-b C-f
M-f M-b 前后词
C-a C-e 行首位
M-a M-e 前后句
M-{ M-} 前后段
C-v M-v 屏幕上下卷
C-x ]   前移一页
C-x [   后移一页 
M-< M-> 移到文件头尾
C-l     当前行放到中心
M-c M-c goto-line
C-t     交换两个字符位置
M-t     交换两个单词位置
M-u     单词全大写
M-l     单词全小写
=============================================
搜索，替换
search
C-s         start serch
   M-n M-P  切换搜索历史
   C-w      补全当前词
   M-y      clipboard 作为查找字符串
   C-s C-r  上下搜索
C-M-s C-M-r 前后正则表达式替换查找
C-M-%       正则表达式替换
list search mode
M-x occur RET string RET

replace
M-% ori_string RET replace_string RET
    y replace
    n skip
    ! replace all below the line
    ^ backup last place
    C-r   edit mode
    C-M-c quit edit mode

M-x replace-string
M-x replace-regexp
=============================================
cscope 查看代码
cscope (read xcscope.el)
    --C-c(cscope) s (search) [command]--
   *C-c s a                     set root dir of code
    C-c s A                     unset root dir
   *C-c s I(index)              create cscope.out from cscope.files amd *.files
    C-c s L(list)               create cscope.files
    
   *C-c s d
    C-c s g(global define)      find function or var define
    C-c s G
        RET(elect)              jump to code from
        SPC(show)               
        o(selectonewin)
        n(shownext)
        p(showprev)
        q(quit)
        h(help)
    C-c s c(caller)             find the caller
    C-c s C(call function list) find the subfunction in the funciton
    C-c s t(text)               find text string
    C-c s f(file)               find a file
    C-c s i                     find the files #inlcude a file
    //
    C-c s e find egrep pattern
    C-c s s find symbol 
    // jump in result
    C-c s b Display *cscope* buffer
    C-c s B Auto display *cscope* buffer toggle
    C-c s n Next symbol
    C-c s N Next file
    C-c s p Previous symbol
    C-c s P previous file
    C-c s u Pop mark

    C-c s W(where)              locate this buffer's cscope directory
          S(show)
          T(Tell)
    C-c s D(dired)              dired this buffer's directory
set this, if not, you cann't change the buffer after jump to the code
(setq buffer-read-only nil) 
(setq inhibit-read-only t) 
cscope使用
        cscope-indexer -r
        (setq cscope-do-not-update-database t)
        cscope-indexer
            cscope -b -i ==> cscope -q -b -i
        http://www.360doc.com/content/12/0531/10/5962017_214928550.shtml
vim     http://os.chinaunix.net/a2006/0707/963/000000963869.shtml
        http://blog.csdn.net/intrepyd/article/details/4202312

=============================================
ibuffer
C-h m 查看帮助**
d delete
u undo
x exec
y yes
s save to filex
t toggle mark
g refresh
o open the file on other windows
e open the file on this windows

-filter buffer-
//      show all the buffer
/f      show the buffer which file name is string
/n      show the buffer which name is string
/p      remove a filter
/c      show the buffer which include string
/s      save the filter
/e		filter by predicate
/r      switch to saved filters
g       update content

-search in buffer-
m		mark buffer
u		unmark buffer
t		reverse selection
O       (occur)show the line mathc string in buffers marked
U       (replace)
Q       (query replace)
I		query replace regexp


/t      反选

f		show the doc in current windows
o		show the doc in other windows
http://emacser.com/ann77/Emacs/EmacsIbuffer.html
正则
http://dsec.pku.edu.cn/~rli/WiKi/EmacsRegexp.html
regexp_test.py
occur
http://www.emacswiki.org/emacs/OccurMode
=============================================
dired
v       view doc
q       quit from view mode
t       mark/unmark
m       mark
u       unmark
!       对光标所在的文件执行SHELL命令（× 代表标记的文件，？在每一个标记的文件上执行）
C(c)    copy
R       move
^       进入上级目录
D       删除当前文件
d       标记当前文件为删除
x       执行
r       进入编辑模式
        C-c C-c 退出编辑模式
+       创建目录
M-o     切换显示/隐藏 配置中过滤的文件
=============================================
Emacs 中的查找
Nonincremental Search
打开文件中查找
使用 moccur 在所有打开的文件内查找
多文件查找
find-grep-dired        ----- 输入目录->过滤字符串"regexstr"(注意引号)
运行外部命令 find，用 grep 过滤文件， ls 产生目录列表，然后进入 dired 模式，这样 列出所有包含某些字符的文件列表。可以使用 dired-do-query-replace-regexp 在文件列 表中查找并替换。可以递归所有子目录。可以用各种条件过滤文件，详细可以查看 find 命 令的帮助。
find-name-dired        ----- 查找指定文件名的文件并进入dired mode

find-dired             ----- 可将find命令的结果生成list并进入dired模式，需要自己配置find 参数
rgrep                  ----- 在制定目录下查找制定字符串，可制定文件后缀
lgrep                  ----- 在当前目录下找

find . -type f -exec rm '{}' \;
find-grep grep-find    -----  包含制定字符串的文件
    find . -type f -exec grep -nH -e  {} NUL ";"
    ==> find . -type f -exec grep -nH -e  {} ";"
        find . -type f -exec grep -nH -e  {} \;
        find . -type f | xargs grep -nH -e string

grep                   ----- 当前目录下查找含有指定字符串的文件，可过滤文件名, -r 可迭代查找
grep -nH -e "stirng" *.cpp [-i no match case][-w Match whole word]
grep -nH -e "stirng" dir_path [-r]][-i no match case][-w Match whole word]

other command
在当前目录中查找指定的 regexp
                       
也可以定制模板
(require 'grep)  
(grep-apply-setting  
 'grep-find-command  
 '("E:/Tools/Emacs/bin/find.exe . -type f -exec E:/Tools/Emacs/bin/grep.exe -nH -ie  {} NUL \";\"" . 80 ) )  
(grep-apply-setting  
 'grep-command  
 "E:/Tools/Emacs/bin/grep.exe -nH -ie ")  
(grep-apply-setting  
 'grep-find-template  
 "E:/Tools/Emacs/bin/find.exe . <X> -type f <F> -exec E:/Tools/Emacs/bin/grep.exe <C> -nH -ie <R> {} NUL \";\"" )  

use emacs find grep on windows 
http://blog.csdn.net/winterttr/article/details/7348279
find maunal
http://world77.blog.51cto.com/414605/209125
=============================================
other function
C-. C-,   -----临时标记，两点间跳转
C-c a x   -----移动光标到制定字符
browse-kill-ring   ----- 所有的剪切板
desktop-save/clear ----- 保存桌面，清除桌面
M-x untabify 全选后用space替换tab
=============================================
ECB
C-c . m d   dir
C-c . m s   source
C-c . m m   methods
C-c . m h   history
C-c . m a   analy
C-c . \     clear error msg
C-c . g d/s/m/h/a
C-c . r     build var and fun

进入ecb窗口
C-c . h     ecb help
进入左侧ecb 窗口 输入字母进入node搜索状态
delete 删除最后字母
home 清楚搜索框

Mac 下
fn键+左方向键是HOME
fn键+右方向键是END
fn+上方向键是page up
fn+下方向键是page down
=============================================
git-emacs
c   commit
    C-c C-c 提交
    C-c C-q 退出
m   mark
u   unmark
a   add to
g   refresh
you can get manual from https://github.com/tsgates/git-emacs
=============================================
eshell
eshell-setting
https://linuxtoy.org/archives/emacs-eshell.html
=============================================
M-x hexl-mode  十六进制
C-c C-c        退出十六进制
=============================================
C++/C
//-*C++-*-  指定c++ 模式
子模式
auto-state    自动缩进，自动换行
hungry-state  自动删除多的空白和空行
C-c C-t       同时开/关 auto-state，hungry-state
C-c C-a       auto-state
C-c C-d       hungry-state

M-;           行尾加注释
C-c C-e       扩展宏 no use
C-c C-c       注掉整个区域
C-u C-c C-c   取消注释
C-c C-\       区域行后添加 '\'

f7            编译
compile(C-f7) 自定义编译
C-c C-c       转到出错处
gdb(f6)       gdb
              annotate = 0  基本模式同gdb
              annotate = 1  单步调试，上下两个窗口
              annotate = 2  产生注释模式
              annotate = 3  all info
              gdb-many-windows      切换单窗体，多窗体模式
              gdb-restore-windows   恢复窗格布局
              其他可以打开工具栏和菜单栏操作或查看快捷键
              可用鼠标在浏览代码窗口中添加删除断点，点击行首
              在local变量窗口中键点击变量可以在speedbar中添加这个数组，然后在这个窗口展开变量,注意勾选auto-update，'+'/'-'后面空格
              观察变量          gud-watch           C-xC-aC-w
              展开/收缩变量                         <SPC>
              开启/关闭工具提示  gud-tooltip-mode
              C-x <SPC>        make a break
              gdb-use-separate-io-buffer，可以在程序代码buffer右侧新建一个IObuffer,再次隐藏
              run <data.in > data.out 
              Emacs gdb 配置和使用
              http://blog.csdn.net/cctvzxxz1/article/details/8604114
              http://emacser.com/emacs-gdb.htm
              M-x gdb GDB排错
              M-x dbx DBX排错
              M-x xdb XDB排错
              M-x sdb SDB排错
=============================================
issue
=============================================
C-q TAB 键入一个TAB
M-x revert-buffer   重新载入文件
=============================================
			RESOURCE
=============================================
http://blog.csdn.net/redguardtoo/article/details/7222501
some importent setting
http://my.oschina.net/alphajay/blog/152599
http://bbs.chinaunix.net/thread-1014134-1-1.html
http://blog.chinaunix.net/uid-20684384-id-1895300.html

http://emacser.com/
http://www.emacswiki.org/

Emacs 编译环境
http://www.ibm.com/developerworks/cn/education/aix/au-emacs7/
用emacs浏览代码一年多的总结*
用zjl-hl.el实现Emacs的C语法高亮着色
Emacs Lisp 功能扩展集锦
ecb + semantic实现si显示函数/变量上下文显示功能
怎么使emacs语法高亮 分别配置x11 和终端模式颜色属性

dea download
http://blog.csdn.net/hnhbdss/article/details/6832130
https://code.google.com/p/dea/

配置eshell
https://linuxtoy.org/archives/emacs-eshell.html

dired's usage
http://lifegoo.pluskid.org/wiki/EnhanceDired.html

TortoiseGit
=============================================
auto-complete about
=============================================
emacs中使用auto-complete的详细设置
http://blog.csdn.net/winterttr/article/details/7524336      -- emacs中使用auto-complete的详细设置
http://blog.csdn.net/cherylnatsu/article/details/7670445    -- Emacs+auto-complete+clang进行代码补全
http://blog.csdn.net/winterttr/article/details/7273345      -- emacs下使用clang补全C++,windows ok, 
        example https://github.com/winterTTr
http://blog.csdn.net/winterttr/article/details/7273283      -- emacs调用外部命令的环境设置
    添加执行目录，on windows， 函数在wttr-utils.el
    (mapc #'wttr/prepend-to-exec-path  
          (reverse   
           '("~/bin"  
             "~/.emacs.d/extra-bin/unix-utils-bin"  
             "~/.emacs.d/extra-bin/etc"  
             "~/.emacs.d/extra-bin/PuTTY"  
             "~/.emacs.d/extra-bin/clang"  
             )))

http://forever8tf.iteye.com/blog/1695400                    -- emacs 使用 auto-complete clang 实现 c++ 代码补全

make clang support c++11
    clang -stdlib=libc++ -std=c++11 -lc++ <sourcefile> -o[outfile]
add header path for clang
    $ echo "" | g++ -v -x c++ -E -

replace auto-complete-clang to auto-complete-clang-async 
http://www.cnblogs.com/rex-tech/p/3483137.html              -- Emacs及扩展配置
https://github.com/Golevka/emacs-clang-complete-async

Completion backend for irony-mode
https://github.com/Sarcasm/company-irony
company-mode补全
http://www.emacswiki.org/emacs/CompanyMode
http://emacser.com/auto-complete_yasnippet.htm
=============================================
cedet semantic -- cann't work on windows but linux
=============================================
http://blog.csdn.net/meteor1113/article/details/4349266
http://logicbaby.wordpress.com/2011/10/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0emacs-cedet-cc%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/
http://itlab.idcquan.com/c/ccjq/773139.html
http://www.educity.cn/develop/126501.html
http://www.csdn123.com/html/blogs/20130801/46088.htm
http://blog.csdn.net/winterttr/article/details/7348279      grep

*emacs 使用 之 cedet
http://blog.csdn.net/hnhbdss/article/details/6831846
A Gentle introduction to CEDET
http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html
cedet 的定制（译文）
http://blog.sina.com.cn/s/blog_66b005600101637l.html
这样使用emacs －cedet(2)  
http://blog.163.com/madahah@126/blog/static/1704992252010102972050351/  -- less

cedet doc
http://www.randomsample.de/cedetdocs/

ede doc
ede-proj-regenerate 生成makefile
C-c . C make project
C-c . s 
ede-mew create new project
http://www.randomsample.de/cedetdocs/ede/
http://www.gnu.org/software/emacs/manual/html_mono/ede.html#EDE-Project-Concepts

括号跳转
C-[ C-n
C-[ C-p
头文件和实现跳转
C-M-f12 
=============================================
python
=============================================
sicode.el 中有两个补全的配置
(require 'all-auto-complete-settings)   // ac form clang  alt + =
(require 'semantic-settings)            // cedet          alt + /
python 不使用上面的配置，默认使用 alt + /补全， 由于与c++的模式不同不冲突 
python 是存文本解析，所以很多不能解析出来， 不能推导类型， 直接声明和包方法可以提示出来(e.g. form os import 可以补充)
=============================================
golang
=============================================
http://www.cnblogs.com/lienhua34/p/5838166.html

go-goto-imports(C-c C-f i)
go-import-add(C-c C-a)
go-remove-unused-imports

godef-describe(C-c C-d)
godef-jump(C-c C-j)
godef-jump-other-window(C-x 4 C-c C-j)
=============================================
=============================================
dea
https://code.google.com/p/dea/
http://blog.csdn.net/hnhbdss/article/details/6832130

cedet
http://blog.sina.com.cn/s/blog_66b005600101637l.html
http://blog.csdn.net/intrepyd/article/details/4331877
内置cedet
http://www.udpwork.com/item/1359.html

c++ config
http://blog.sina.com.cn/s/blog_66b00560010162kh.html

cscope
Using Cscope on large projects (example: the Linux kernel)
http://cscope.sourceforge.net/large_projects.html

dired
http://tangtong.iteye.com/blog/280464

rpm
http://pkgs.org/
www.rpmfind.net

(require 'eassist)  ;;这个工具不错   ;h, cpp文件跳转函数, 支持即时按键选择 http://www.emacswiki.org/emacs/EAssist

;;自动下载插件的插件 autoinstall
;;;http://www.emacswiki.org/emacs/auto-install.el
;;http://www.emacswiki.org/emacs/AutoInstall
(require 'auto-install)
(setq auto-install-directory "~/.emacs.d/auto-install/");;设置插件下载目录

;;doxymacs注释工具
(require 'doxymacs)

;;emacs中管理多个终端的工具
;;http://www.emacswiki.org/emacs/MultiTerm
(require 'multi-term)
(setq multi-term-program "/bin/bash")

;超强恢复 http://www.emacswiki.org/emacs/BrowseKillRing
(require 'browse-kill-ring)

;;xCscope配置
;;;http://www.emacswiki.org/emacs/CScopeAndEmacs
(require 'xcscope)
(require 'xcscope+);;cscope的插件扩展  http://www.emacswiki.org/emacs/xcscope+.el
(setq cscope-do-not-update-database t)

;;slime

;; find
http://blog.csdn.net/pfanaya/article/details/7013742
=============================================
    example
=============================================
http://blog.csdn.net/fhq1989312/article/details/7314354
https://github.com/alexott/emacs-configs/blob/master/rc/emacs-rc-cedet.el
https://gist.github.com/alexott/3930120
http://tuhdo.github.io/c-ide.html   **

=============================================
    group
=============================================
https://groups.google.com/forum/#!forum/cn.bbs.comp.emacs
http://article.gmane.org/gmane.emacs.semantic/1933

=============================================
    linux
=============================================
/usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.14' not found
strings /usr/lib/libstdc++.so.6 | grep GLIBCXX
GLIBCXX_3.4
...
GLIBCXX_FORCE_NEW  
GLIBCXX_DEBUG_MESSAGE_LENGTH
没有动态库要求的GLIBCXX_3.4.14
所以需要升级一下GCC 版本， 下载新的版本替换原来的GCC lib即可，此问题类似于windows的side by side， 编译器版本不同造成的
http://blog.csdn.net/xiaolong2w/article/details/23915171


程序 pos 输出结果        使用的动态库                     对应的动态库搜索路径指定方式
./                      ./libpos.so                     编译目标代码时指定的动态库搜索路径
/root/test/env/lib      /root/test/env/lib/libpos.so    环境变量 LD_LIBRARY_PATH 指定的动态库搜索路径
/root/test/conf/lib     /root/test/conf/lib/libpos.so   配置文件 /etc/ld.so.conf 中指定的动态库搜索路径
/lib                    /lib/libpos.so                  默认的动态库搜索路径 /lib
/usr/lib                /usr/lib/libpos.so              默认的动态库搜索路径 /usr/lib

software source
http://blog.51osos.com/linux/rhel-centos-fedora-epel-remi-rpmforge-rpmfusion/
EPEL源
http://fedoraproject.org/wiki/EPEL
Remi源
http://rpms.famillecollet.com/
RPMForge源
http://repoforge.org/
RPMFusion源
http://rpmfusion.org/
